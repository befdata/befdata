- page_title "Approve invalid values of #{@datacolumn.columnheader}"

%h3 Approve invalid values
- if @datacolumn.datagroup.blank?
  %p
    Please #{link_to 'Approve the datagroup', approve_datagroup_datacolumn_path(@datacolumn)} first.
- else
  - if  @count_of_all_invalid_values > 200
    #too-many-alert
      %b Note:
      There are
      %b= number_with_delimiter(@count_of_all_invalid_values)
      invalid values. If you think of them as self-explanatory, ie. Category information should
      be copied from original imported value, we can auto-fill &amp; approve all of them for you.
      = form_tag autofill_and_update_invalid_values_datacolumn_path(@datacolumn) do
        = submit_tag "Yes, do it for me!", confirm: "Are you sure?"
        = link_to "No, thanks", "#", id: 'close-too-many-alert'

  .info
    .right
      Approve
      %b #{@count_of_all_invalid_values}
      invalid values using
      %ul.switchers
        %li
          %span.switcher#form_switcher.selected Form
        %li
          %span.switcher#csv_switcher CSV
    %b  Datagroup:
    = link_to  @datacolumn.datagroup, :target => '_blank' do
      = @datacolumn.datagroup.title
    (#{@datacolumn.datagroup.categories.count} categories)

  #invalid-values-form
    = form_tag update_invalid_values_datacolumn_path(@datacolumn) do
      %table#invalid-values-table
        %thead
          %tr
            %th Original
            %th Short
            %th Long
            %th Description
        %tbody
          - @invalid_values.each do |value|
            %tr
              %td
                = value.import_value
                = hidden_field_tag 'invalid_values[][import_value]', value.import_value
              %td= text_field_tag "invalid_values[][short]", value.import_value
              %td= text_field_tag "invalid_values[][long]"
              %td= text_field_tag "invalid_values[][description]"

      - if  @count_of_all_invalid_values > @invalid_values.per_page
        %div
          Displaying  #{@invalid_values.length} of #{@count_of_all_invalid_values} invalid values
          .right= will_paginate @invalid_values
        = submit_tag 'Approve this page'
      - else
        = submit_tag "Approve", :disabled => @count_of_all_invalid_values.zero?

  #invalid-values-csv.prepend-1.hidden
    .step
      %span Step 1
      = link_to "Download CSV file of invalid values", approve_invalid_values_datacolumn_path(@datacolumn, :csv)
    .step
      %span Step 2
      Describe invalid values in the CSV file.
      %br
      Delete rows of invalid values that you don't want to describe.
    .step
      %span Step 3
      Upload your CSV file
      = form_tag update_invalid_values_with_csv_datacolumn_path(@datacolumn), :multipart => true do
        = file_field_tag :csvfile, :accept => 'text/csv', :disabled => @count_of_all_invalid_values.zero?
        = submit_tag "upload", :disabled => @count_of_all_invalid_values.zero?

  :javascript
    $(function(){
      $(".switchers .switcher").click(function(e){
        $(this).closest('.switchers').find(".switcher:not(this)").removeClass('selected');
        $(this).addClass('selected');
      })
      $("#form_switcher").click(function(){
        $("#invalid-values-form").show();
        $("#invalid-values-csv").hide();
      });
      $("#csv_switcher").click(function(){
        $("#invalid-values-form").hide();
        $("#invalid-values-csv").show();
      });
      $("#close-too-many-alert").click(function(e){
        $("#too-many-alert").hide();
        e.preventDefault();
      })
    })