%h3 Approve Metadata and Acknowledgements

%p
  Please confirm the metadata and acknowledgements.

= form_tag :controller=> 'datacolumns', :action => 'update_metadata' do |form|
  = hidden_field_tag :id, @datacolumn.id
  %dl
    %dt= label_tag 'datacolumn[definition]', 'Definition'
    %dd= text_area_tag 'datacolumn[definition]', @datacolumn.definition, {:class => "metadata-text-input"}

    %dt= label_tag "datacolumn[tag_list]", 'Keywords (Comma separated)'
    %dd= text_field_tag "datacolumn[tag_list]", @datacolumn.tag_list.join(", "), {:class => "metadata-text-input",:id=>"tag_list"}
  %dl
    %dt= label_tag 'datacolumn[comment]',"Comment"
    %dd= text_area_tag 'datacolumn[comment]', @datacolumn.comment, {:class => "metadata-text-input"}
  %dl
    %dt= label_tag 'datacolumn[unit]', 'Unit'
    %dd= text_field_tag 'datacolumn[unit]', @datacolumn.unit, {:class => "metadata-text-input"}
  %dl#metadata-people
    %dt= label_tag 'people', 'Acknowledged people'
    - unless @datacolumn.informationsource.blank?
      = hidden_field_tag "datacolumn[informationsource]", @datacolumn.informationsource
      %p.datagroup-description#unmatched-persons-hint
        = @datacolumn.informationsource
        = link_to "Delete this message", "#", {:id => "unmatched-persons-delete"}
    %dd
      = select "person", "person_id", User.all_users_names_and_ids_for_select, {:prompt => 'Select Member'}, {:onchange => 'selectPeople(this)'}
      %ul#people-list.metadata-approve-people{:style => 'list-style: none;'}
        - @ppl.each do |person|
          %li{:onclick => "this.parentNode.removeChild(this);"}
            %input{:name => "people[]", :type => "hidden", :value => person.id}/
            = image_tag person.avatar.to_s, :height => '16'
            = person.to_label

  = submit_tag 'Confirm / Save'
:javascript
  jQuery(document).ready(function(){
    $("#unmatched-persons-delete").click(function(event) {
      $('#datacolumn_informationsource').val('')
      $('#unmatched-persons-hint').css("text-decoration", "line-through")
      event.preventDefault();
    });
    function split( val ) {
      return val.split( /,\s*/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }
    $("#tag_list")
    .bind( "keydown", function( event ) {
      if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).data( "autocomplete" ).menu.active ) {
          event.preventDefault();
      }
    })
    .autocomplete({
      source: function( request, response ) {
        var term = extractLast( request.term );
        if (term.length >=2 ){
        $.getJSON( "/keywords.json", {
          term: term
        }, response );
        }
      },
      focus: function() {
        // prevent value inserted on focus
        return false;
      },
      select: function( event, ui ) {
        var terms = split( this.value );
        // remove the current input
        terms.pop();
        // add the selected item
        terms.push( ui.item.value );
        // add placeholder to get the comma-and-space at the end
        terms.push( "" );
        this.value = terms.join( ", " );
        return false;
      },
      minLength: 2,
      delay: 200
    })
  });

