- page_title "Category: #{@category.short}"

- content_for :actions do
  - unless @category.sheetcells.empty?
    = link_to category_path(:id => @category, :format => :csv), title: 'Download sheetcells belonging to this category' do
      = image_tag("save.png")
      Download Sheetcells as CSV
    - if current_user.has_role?(:admin)
      = link_to upload_sheetcells_category_path, title: "Batch update sheetcells's category via CSV file" do
        = image_tag("file-upload.png")
        Update Sheetcells via CSV
  = link_to datagroup_path(@category.datagroup_id) do
    = image_tag "back.png"
    Back to datagroup page

%h2= "Category: #{@category.short}"
%h4 Long
%p= @category.long
%h4 Description
%p= @category.description
%h4 Comment
%p= @category.comment
- unless @category.datagroup.blank?
  %h4 Datagroup
  %p= link_to @category.datagroup.title, @category.datagroup

- if @category.sheetcells.empty?
  %h3 No Occurrences found
- else
  %h3 Occurrences distribution (#{@category.sheetcells.count} sheetcells in total)
  %table#category-occurrences-table.tablesorter
    %thead
      %tr
        %th Import Value
        %th Columnheader
        %th Dataset
        %th count
    %tbody
      - @sheetcells.each do |sc|
        %tr
          %td= sc.import_value
          %td= sc.datacolumn.columnheader
          %td= render :partial => sc.datacolumn.dataset, :locals => {:with_cart => true, :with_comment => false}
          %td= sc.count
  :javascript
    $(document).ready(function()
      {
        $("#category-occurrences-table").tablesorter( {sortList: [[3,1], [2,0], [1,0], [0,0]]} );
      }
    );

- changes = flash[:updates]
- if changes && !changes.empty?
  %h3 Changes List
  %table#sheetcell-change-list
    %thead
      %tr
        %th No. of Sheet cells
        %th Operation type
        %th description
    %tbody
      %tr
        %td= changes[:not_modified]
        %td Not changed
        %td They already belong to this category
      %tr
        %td= changes[:reassigned]
        %td Re-assigned
        %td They are re-assigned to other categories.
      %tr
        %td= changes[:created]
        %td New category created 
        %td New categories are created for these sheetcells
    %tfoot
      %tr
        %td{colspan: 3} #{pluralize(changes[:total], 'edit')} in total
