%h2= @dataset.title

- unless current_user || @dataset.visible_for_public
  #errorExplanation
    Access denied. Please log in.

- else
  - content_for :actions do
    #dataset-menu{:class => !@dataset.finished_import? && 'hidden'}
      = render :partial => 'edit_download_destroy_links'
    - unless @dataset.finished_import?
      = render :partial => 'import_status'

  - content_for :info do
    %h3
      Last update
    %p= @dataset.last_update.localtime.strftime "%Y-%m-%d %H:%M"

    - if !@dataset.comment.blank? && may_see_comment?(@dataset)
      %h3
        Comment
      %p= @dataset.comment

    - unless @contacts.blank?
      %h3
        Contact persons
      %ul
        - @contacts.each do |c|
          %li= render c
    - if current_user
      %h3 Email contact
      %ul
        %li
          = render :partial => "users/email_list_modal",
            :locals => {:list => @dataset.owners_email_list, :css => "dataset_owners", :caption => 'Dataset owners'}
    - unless @projects.blank?
      %h3
        Projects involved
      %ul
        - @projects.each do |p|
          %li= link_to p, project_path(p.id)
    - if current_user && (current_user.has_role?(:owner, @dataset) || current_user.has_role?(:admin))
      %h3
        Downloads (#{@dataset.downloads || 0})
      - unless @dataset.dataset_downloads.empty?
        %ul
          - @dataset.dataset_downloads.sort_by {|dl|dl.created_at}.reverse.each do |dl|
            %li
              = dl.created_at.localtime.strftime "%Y-%m-%d %H:%M"
              - if dl.user
                = link_to dl.user.lastname, dl.user
              - else
                Public

  - unless @dataset.usagerights.blank?
    %h4 Usage Rights
    %p= @dataset.usagerights
  - unless @dataset.abstract.blank?
    %h4 Dataset Abstract
    %p= @dataset.abstract
  - unless @dataset.design.blank?
    %h4 Dataset Design
    %p= @dataset.design
  - unless @dataset.spatialextent.blank?
    %h4 Spatial Extent
    %p= @dataset.spatialextent
  - unless @dataset.published.blank?
    %h4 Published
    %p= @dataset.published
  - unless @dataset.temporalextent.blank?
    %h4 Temporal Extent
    %p= @dataset.temporalextent
  - unless @dataset.taxonomicextent.blank?
    %h4 Taxonomic Extent
    %p= @dataset.taxonomicextent
  - unless @dataset.circumstances.blank?
    %h4 Measurement Circumstances
    %p= @dataset.circumstances
  - unless @dataset.dataanalysis.blank?
    %h4 Data Analysis
    %p= @dataset.dataanalysis

  - unless @freeformats.blank?
    %h4 Freeformat files (#{@freeformats.length})
    = render :partial => 'freeformats/index'

  - unless @datacolumns.empty?
    %h3 Data columns available in the raw data part of this dataset
    - @datacolumns.each do |column|
      .span-4.dataset_columns{:class => cycle('border', 'last', :name => 'display_in_columns')}
        .columnheader= column.columnheader
        = column.definition
        %br
        %i
          Data group:
          - if current_user
            = link_to column.datagroup.title, column.datagroup
          - else
            = column.datagroup.title
        %br
        - if column.values_stored?
          %table.import_values
            %tr
              %th.span-4.last= "Values"
            - column.accepted_values(5).each do |sc|
              %tr
                %td.span-4.last{:class => cycle('even', 'odd')} #{sc.accepted_value}
        - else
          = image_tag 'alert.png'
          = "No values yet imported for this data column"

        - u = column.users
        - unless u.blank?
          %i Members involved with this Data Column:
          = u.map{|person| link_to person, user_path(person.path_name)}.to_sentence.html_safe
